#named_v =  paste0("sdf",chr_selection$chr)
# names(named_v) = chr_selection$chr
#chromosome_labeller = as_labeller(named_v)
#cnv.plot$chr = as.vector(cnv.plot$chr)
#cnv.plot$chr_f = factor(as.vector(cnv.plot$chr), levels=chr_selection$chr)
#Â define the breaks on the y axis (cn) to show:
if (max.cn < 8) {break.step = 1}
else if (max.cn >= 8 & max.cn < 25) {break.step = 2}
else (break.step = 5)
breaks_y = seq(0,max.cn, break.step)
# breaks_y = c(0,1,2)
# breaks_y = c(breaks_y, unique(floor(quantile(2:max_y, probs = seq(.1, .9, by = .1)))))
## plot copy number
p = p +
geom_segment(aes(x = start, y = minorAlleleCopyNumber, xend = end,
yend = minorAlleleCopyNumber, group=chr), # ICC group
data = cnv.plot[cnv.plot$chr %in% chr_selection$chr,], colour=color_minor_cn,size=1) +
geom_segment(aes(x = start, y = copyNumber, xend = end,
yend = copyNumber,  group=chr), # ICC group
data = cnv.plot[cnv.plot$chr %in% chr_selection$chr,], colour="black",size=1) +
facet_grid( . ~ factor(chr, levels = unique(chr_selection$chr)), # not converting to factor to make the labeller work
scales = "free_x", space = "free_x", switch = "x", #) +
# #Add different labels?
labeller = as_labeller(chromosome_labeller)) + #(chr=chr_selection$chr) ) +
#labeller = labeller(chr = chromosome_labeller )) +
#labeller = labeller(chr = chromosome_labeller(chr=chr_selection$chr) )) +
ggtitle(title) +
theme(#aspect.ratio = 1,
text=element_text(size=size_text, colour="black"), #, face ="bold"),
axis.text.x=element_text(size=size_text, colour="black"),
axis.title.x =element_text(size=size_text, colour="black"),
axis.title.y =element_text(size=size_text, colour="black"),
plot.title =element_text(size=size_title, colour="black", margin = unit(c(-.15,0,0,0),'cm')), # to reduce space between title and plot:
axis.text.y=element_text(size=size_text, colour="black"),
panel.background = element_blank(),
strip.background = element_blank(),
strip.placement = "outside",
strip.clip = "off",
plot.margin = unit(c(.25, .1, -0.1, .1), "cm"),
panel.grid.major.x = element_blank(),
#panel.spacing = unit(4, "lines"), ICC
panel.spacing.x = unit(npc_now, "npc"),
strip.text.x = element_text(size=size_chr_labels, face="bold"), #element_blank(), ## to remove the title of the facet panels
strip.switch.pad.grid = unit(0, "cm"),
# explicitly set the horizontal lines (or they will disappear too)
panel.grid.major.y = element_line( size=.05, color="black"),
panel.border = element_blank() #rect(colour = "black", fill=NA, size=.1)
) +
labs(x = "", y = "Copy number")  +
coord_cartesian(clip = "off", expand=0) + # ICC
#ylim(c(0,max_y),expand) +
scale_y_continuous(limits = c(lower_limit_karyotype - 0.05,max_y_svs_3+0.5),  breaks=breaks_y, expand = 1,
labels=c(breaks_y[1:length(breaks_y)-1], paste0(">=",breaks_y[length(breaks_y)]))) + #seq(0,max_y,2)) +
scale_x_continuous(expand=c(0,0),
labels=formatter1000,
breaks=scaler(scale_ticks))
# add lines where the SVs go
p = p + geom_abline(slope = 0, intercept=max_y_svs_1, colour="black", size=.25)
p = p + geom_abline(slope = 0, intercept=max_y_svs_2, colour="black", size=.25)
#----------------------------------------------------------------------------
# add intrachr
#----------------------------------------------------------------------------
#if (nrow(intraSV) >= 1){
if (!is.null(intraSV)){
if (nrow(intraSV) >= 1){
for (i in 1:nrow(intraSV)){
# get the maximum coordinates for the chr at hand
max_coord = max(cnv.plot[cnv.plot$chr==intraSV$chr1[i],"end"])
min_coord = min(cnv.plot[cnv.plot$chr==intraSV$chr1[i],"start"])
# add max
intraSV$max_y_sv = max_y_svs_2
intraSV$max_y_sv[which(intraSV$strands %in% c("DEL","DUP","+-", "-+"))] = max_y_svs_1
# correct the arc;
intraSV$curve[which( intraSV$strands %in% c("DEL","h2hINV", "+-", "--"))] = abs(intraSV$curve[which( intraSV$strands %in% c("DEL","h2hINV", "+-", "--"))])
# if one breakpoint outside or range, just plot a vertical line, if not the entire arc
if (intraSV$pos1[i] >= min_coord &  intraSV$pos2[i] <= max_coord ){ # within range
p = p +
# arc
geom_curve(data = data.frame(cov = 1, chr = intraSV$chr1[i]),
x=intraSV$pos1[i], xend=intraSV$pos2[i],
y=intraSV$max_y_sv[i], yend=intraSV$max_y_sv[i], curvature=intraSV$curve[i],
size=size_sv_line,colour=intraSV$colour[i])
p = p +
# vertical
geom_curve(data = data.frame(cov = 1, chr = intraSV$chr1[i]),
x=intraSV$pos1[i], xend=intraSV$pos1[i],
y=0, yend=intraSV$max_y_sv[i], curvature=0,  size=size_sv_line, colour=intraSV$colour[i]) +
# vertical
geom_curve(data = data.frame(cov = 1, chr = intraSV$chr1[i]),
x=intraSV$pos2[i], xend=intraSV$pos2[i],
y=0, yend=intraSV$max_y_sv[i], curvature=0,  size=size_sv_line, colour=intraSV$colour[i])
}
# cases now with left size in range
if (intraSV$pos1[i] >= min_coord & intraSV$pos1[i] < max_coord  &  intraSV$pos2[i] > max_coord){ # within range
p = p +
geom_curve(data = data.frame(cov = 1, chr = intraSV$chr1[i]),
x=intraSV$pos1[i], xend=intraSV$pos1[i],
y=0, yend=max_y_svs_3-0.15, curvature=0,  size=size_sv_line, colour=intraSV$colour[i])
# add diagonal line on top
x_range_end = chr_selection %>% filter(chr == intraSV$chr1[i]) %>% filter(intraSV$pos1[i]>=start & intraSV$pos1[i] <= end) %>% filter(row_number()==1) %>% pull(end)
x_range_start = chr_selection %>% filter(chr == intraSV$chr1[i]) %>% filter(intraSV$pos1[i]>=start & intraSV$pos1[i] <= end) %>% filter(row_number()==1) %>% pull(start)
x_range=(x_range_end-x_range_start)*0.01
p = p +
geom_curve(data = data.frame(cov = 1, chr = intraSV$chr1[i]),
x=intraSV$pos1[i], xend=intraSV$pos1[i]+x_range, #2000000,
y=max_y_svs_3-size_interchr_SV_tip, yend= max_y_svs_3, angle=45, curvature=0,  size=size_sv_line, colour=intraSV$colour[i])
if (label_interchr_SV) {
p = p + geom_text(data = data.frame(cov = 1, chr = intraSV$chr1[i]),
x=intraSV$pos1[i]-x_range, #2000000,
y=max_y_svs_3+size_interchr_SV_tip, size=size_text/.pt, colour=intraSV$colour[i],
label=intraSV$chr2[i])
}
}
# `    # cases now with right size in range
if (intraSV$pos1[i] < min_coord &  intraSV$pos2[i] <= max_coord & intraSV$pos2[i] > min_coord){ # within range
p = p +
geom_curve(data = data.frame(cov = 1, chr = intraSV$chr1[i]),
x=intraSV$pos2[i], xend=intraSV$pos2[i],
y=0, yend=max_y_svs_3-0.15, curvature=0,  size=size_sv_line, colour=intraSV$colour[i])
# add diagonal line on top
x_range_end = chr_selection %>% filter(chr == intraSV$chr2[i]) %>% filter(intraSV$pos2[i]>=start & intraSV$pos2[i] <= end) %>% filter(row_number()==1) %>% pull(end)
x_range_start = chr_selection %>% filter(chr == intraSV$chr2[i]) %>% filter(intraSV$pos2[i]>=start & intraSV$pos2[i] <= end) %>% filter(row_number()==1) %>% pull(start)
x_range=(x_range_end-x_range_start)*0.01
p = p +
geom_curve(data = data.frame(cov = 1, chr = intraSV$chr2[i]),
x=intraSV$pos2[i], xend=intraSV$pos2[i]-x_range, #2000000,
y=max_y_svs_3-size_interchr_SV_tip, yend=max_y_svs_3 , angle=45, curvature=0,  size=size_sv_line, colour=intraSV$colour[i])
if (label_interchr_SV) {
p = p + geom_text(data = data.frame(cov = 1, chr = intraSV$chr2[i]),
x=intraSV$pos2[i]-x_range, #2000000,
y=max_y_svs_3+size_interchr_SV_tip, size=size_text/.pt, colour=intraSV$colour[i],
label=intraSV$chr1[i])
}
}
}
}
}
#----------------------------------------------------------------
# plot interchr SVs involving chrs in levels_chrs
#----------------------------------------------------------------
if (interFlag){
# # first those involving the middle chromosome  ## missing those with other chrs
idx= which(interSV$chr1 %in% chr_selection$chr &  interSV$chr2 %in% chr_selection$chr)
if(length(idx)>0){
interSV=interSV[idx,]
# add max
interSV$max_y_sv = max_y_svs_2
interSV$max_y_sv[which( interSV$strands %in% c("DEL","DUP","+-", "-+"))] = max_y_svs_1
# change curvature
interSV$curve[which( interSV$strands %in% c("DEL","h2hINV", "+-", "--"))] = abs(interSV$curve[which( interSV$strands %in% c("DEL","h2hINV", "+-", "--"))])
info_chrs = data.frame(chrs=chr_selection$chr)
# determine offset: we do so by: (1) compute the total size of the chrs displayed
total_chr_size = 0; size_in_plot=c()
for(ii in chr_selection$chr){
size_now=max(cnv.plot[cnv.plot$chr==ii,"end"]) -min(cnv.plot[cnv.plot$chr==ii,"start"])
size_in_plot= c(size_in_plot, size_now)
total_chr_size = total_chr_size +  size_now
}
info_chrs$size_in_plot  = size_in_plot
# now we compute the fraction of the plot that is "space", which corresponds to approx npc_now
gap = (total_chr_size*npc_now)
for (i in 1:nrow(interSV)){  ## check as well that the chrs interact with the selected one!
# in whcih position of the chr list we find the main chr?
# we assume as main chr the first in the list of chrs
position_chr_1 = which(chr_selection$chr == interSV$chr1[i])
position_chr_2 = which(chr_selection$chr == interSV$chr2[i])
# now define which chr is the leftmost in the plot (that is, in chr_selection$chr), so we always draw SVs to the right
#if (position_chr_1 < position_chr_2){} # the first chr in the SV object is the leftmost, no need to do anything
if (position_chr_1 > position_chr_2){
chr1_now=interSV$chr1[i]
pos1_now=interSV$pos1[i]
chr2_now=interSV$chr2[i]
pos2_now=interSV$pos2[i]
# change the order in object, so below we do not need to worry about which column to use depending on chr order in the plot
interSV$chr1[i] = chr2_now; interSV$chr2[i] = chr1_now; interSV$pos1[i] = pos2_now; interSV$pos2[i] = pos1_now
chrs_now = interSV[i,c("chr1","chr2")]
}else{chrs_now = interSV[i,c("chr1","chr2")]}
#----------------------------
# we plot always to the right now
#----------------------------
# range in second chr
min_range=  min(cnv.plot[cnv.plot$chr==chrs_now[1,2],"start"])
size_leftmost_chr = max(cnv.plot[cnv.plot$chr==chrs_now[1,1],"end"])
# compute offset
offset = interSV$pos1[i] +  # the start in leftmost
(size_leftmost_chr - interSV$pos1[i]) + # what we need to go of the leftmost chr till the end
(interSV$pos2[i] - min_range) + # the position in the chr on the right + the value where it starts
gap
# are there other chrs in between the origin chr (main chr) and the target chr, which in this case is on the right??
indexes = seq(1,length(chr_selection$chr))
indexes = which(indexes>position_chr_1 & indexes<position_chr_2)
if(length(indexes)>0){offset = offset + (gap * length(indexes)) + sum(info_chrs$size_in_plot[indexes])}
# check that both breakpoints map to the copy number interval in the plot
min_pos_chr1 =  min(cnv.plot[cnv.plot$chr==chrs_now[1,1],"start"])
max_pos_chr1 =  max(cnv.plot[cnv.plot$chr==chrs_now[1,1],"end"])
min_pos_chr2 =  min(cnv.plot[cnv.plot$chr==chrs_now[1,2],"start"])
max_pos_chr2 =  max(cnv.plot[cnv.plot$chr==chrs_now[1,2],"end"])
in_range_chr1 = (interSV$pos1[i] > min_pos_chr1 & interSV$pos1[i] < max_pos_chr1)
in_range_chr2 = (interSV$pos2[i] > min_pos_chr2 & interSV$pos2[i] < max_pos_chr2)
if(in_range_chr1 & in_range_chr2){
# add vertical lines first
p = p +
# on the left
geom_curve(data = data.frame(cov = 1, chr = interSV$chr1[i]),
x=interSV$pos1[i], xend=interSV$pos1[i],
y=0, yend=interSV$max_y_sv[i], curvature=0,  size=size_sv_line, colour=interSV$colour[i]) +
# on the right
geom_curve(data = data.frame(cov = 1, chr = interSV$chr2[i]),
x=interSV$pos2[i], xend=interSV$pos2[i],
y=0, yend=interSV$max_y_sv[i], curvature=0,  size=size_sv_line, colour=interSV$colour[i])
# add arc
p = p +
geom_curve(data = data.frame(cov = 1, chr = chrs_now[1,1]),
x=interSV$pos1[i], # the start in chr9
xend=offset,
y=interSV$max_y_sv[i], yend=interSV$max_y_sv[i], curvature=interSV$curve[i],
size=size_sv_line,colour=interSV$colour[i])
}
# the leftmost breakpoint is outside of the range
if(!in_range_chr1){
## add vertical line
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV$chr2[i]),
x=interSV$pos2[i], xend=interSV$pos2[i],
y=0, yend=max_y_svs_3-size_interchr_SV_tip, curvature=0,  size=size_sv_line, colour=interSV$colour[i])
# add diagonal line on top
x_range_end = chr_selection %>% filter(chr == interSV$chr2[i]) %>% filter(interSV$pos2[i]>=start & interSV$pos2[i] <= end) %>% filter(row_number()==1) %>% pull(end)
x_range_start = chr_selection %>% filter(chr == interSV$chr2[i]) %>% filter(interSV$pos2[i]>=start & interSV$pos2[i] <= end) %>% filter(row_number()==1) %>% pull(start)
x_range=(x_range_end-x_range_start)*0.01
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV$chr2[i]),
x=interSV$pos2[i], xend=interSV$pos2[i]-x_range, #2000000,
y=max_y_svs_3-size_interchr_SV_tip, yend=max_y_svs_3 , angle=45, curvature=0,  size=size_sv_line, colour=interSV$colour[i])
if (label_interchr_SV) {
p = p + geom_text(data = data.frame(cov = 1, chr = interSV$chr2[i]),
x=interSV$pos2[i]-x_range, #2000000,
y=max_y_svs_3+size_interchr_SV_tip, size=size_text/.pt, colour=interSV$colour[i],
label=interSV$chr1[i])
}
}
# the rightmost breakpoint is outside of the range
if(!in_range_chr2){
## add vertical line
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV$chr1[i]),
x=interSV$pos1[i], xend=interSV$pos1[i],
y=0, yend=max_y_svs_3-size_interchr_SV_tip, curvature=0,  size=size_sv_line, colour=interSV$colour[i])
# add diagonal line on top
x_range_end = chr_selection %>% filter(chr == interSV$chr1[i]) %>% filter(interSV$pos1[i]>=start & interSV$pos1[i] <= end) %>% filter(row_number()==1) %>% pull(end)
x_range_start = chr_selection %>% filter(chr == interSV$chr1[i]) %>% filter(interSV$pos1[i]>=start & interSV$pos1[i] <= end) %>% filter(row_number()==1) %>% pull(start)
x_range=(x_range_end-x_range_start)*0.01
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV$chr1[i]),
x=interSV$pos1[i], xend=interSV$pos1[i]-x_range, #2000000,
y=max_y_svs_3-size_interchr_SV_tip, yend=max_y_svs_3 , angle=45, curvature=0,  size=size_sv_line, colour=interSV$colour[i])
if (label_interchr_SV) {
p = p + geom_text(data = data.frame(cov = 1, chr = interSV$chr1[i]),
x=interSV$pos1[i]-x_range, #2000000,
y=max_y_svs_3+size_interchr_SV_tip, size=size_text/.pt, colour=interSV$colour[i],
label=interSV$chr2[i])
}
}
}
}
}
#----------------------------------------------------------------
# plot lines with ticks for interchr SVs involving chrs not displayed
#----------------------------------------------------------------
if(interFlag){ #(interSV_other_chrs)){
if (exists("interSV_other_chrs")){
print(interSV_other_chrs)
for(i in 1:nrow(interSV_other_chrs)){
chr1_in = (interSV_other_chrs$chr1[i] %in% chr_selection$chr)
# the leftmost breakpoint is outside of the range
if((!chr1_in) ){
# check that both breakpoints map to the copy number interval in the plot for chr2
min_pos_chr2 =  min(cnv.plot[cnv.plot$chr==interSV_other_chrs$chr2[i],"start"])
max_pos_chr2 =  max(cnv.plot[cnv.plot$chr==interSV_other_chrs$chr2[i],"end"])
in_range_chr2 = (interSV_other_chrs$pos2[i] > min_pos_chr2 & interSV_other_chrs$pos2[i] < max_pos_chr2)
if(in_range_chr2){
## add vertical line
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV_other_chrs$chr2[i]),
x=interSV_other_chrs$pos2[i], xend=interSV_other_chrs$pos2[i],
y=0, yend=max_y_svs_3-0.2, curvature=0,  size=size_sv_line, colour=interSV_other_chrs$colour[i])
# add diagonal line on top
x_range_end = chr_selection %>% filter(chr == interSV_other_chrs$chr2[i]) %>% filter(interSV_other_chrs$pos2[i]>=start & interSV_other_chrs$pos2[i] <= end) %>% filter(row_number()==1) %>% pull(end)
x_range_start = chr_selection %>% filter(chr == interSV_other_chrs$chr2[i]) %>% filter(interSV_other_chrs$pos2[i]>=start & interSV_other_chrs$pos2[i] <= end) %>% filter(row_number()==1) %>% pull(start)
x_range=(x_range_end-x_range_start)*0.01
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV_other_chrs$chr2[i]),
x=interSV_other_chrs$pos2[i], xend=interSV_other_chrs$pos2[i]-x_range, #2000000,
y=max_y_svs_3-size_interchr_SV_tip, yend=max_y_svs_3 , angle=45, curvature=0,  size=size_sv_line, colour=interSV_other_chrs$colour[i])
if (label_interchr_SV) {
p = p + geom_text(data = data.frame(cov = 1, chr = interSV_other_chrs$chr2[i]),
x=interSV_other_chrs$pos2[i]-x_range, #2000000,
y=max_y_svs_3+size_interchr_SV_tip, size=size_text/.pt, colour=interSV_other_chrs$colour[i],
label=interSV_other_chrs$chr1[i])
}
}
}
# the rightmost breakpoint is outside of the range
chr2_in = (interSV_other_chrs$chr2[i] %in% chr_selection$chr)
if( (!chr2_in)){
# check that both breakpoints map to the copy number interval in the plot for chr1
min_pos_chr1 =  min(cnv.plot[cnv.plot$chr==interSV_other_chrs$chr1[i],"start"])
max_pos_chr1 =  max(cnv.plot[cnv.plot$chr==interSV_other_chrs$chr1[i],"end"])
in_range_chr1 = (interSV_other_chrs$pos1[i] > min_pos_chr1 & interSV_other_chrs$pos1[i] < max_pos_chr1)
if( in_range_chr1){
# add vertical line
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV_other_chrs$chr1[i]),
x=interSV_other_chrs$pos1[i], xend=interSV_other_chrs$pos1[i],
y=0, yend=max_y_svs_3-0.2, curvature=0,  size=size_sv_line, colour=interSV_other_chrs$colour[i])
# add diagonal line on top
x_range_end = chr_selection %>% filter(chr == interSV_other_chrs$chr1[i]) %>% filter(interSV_other_chrs$pos1[i]>=start & interSV_other_chrs$pos1[i] <= end) %>% filter(row_number()==1) %>% pull(end)
x_range_start = chr_selection %>% filter(chr == interSV_other_chrs$chr1[i]) %>% filter(interSV_other_chrs$pos1[i]>=start & interSV_other_chrs$pos1[i] <= end) %>% filter(row_number()==1) %>% pull(start)
x_range=(x_range_end-x_range_start)*0.01
p = p +
geom_curve(data = data.frame(cov = 1, chr = interSV_other_chrs$chr1[i]),
x=interSV_other_chrs$pos1[i], xend=interSV_other_chrs$pos1[i]-x_range, #2000000,
y=max_y_svs_3-size_interchr_SV_tip, yend=max_y_svs_3 , angle=45, curvature=0,  size=size_sv_line, colour=interSV_other_chrs$colour[i])
if (label_interchr_SV) {
p = p + geom_text(data = data.frame(cov = 1, chr = interSV_other_chrs$chr1[i]),
x=interSV_other_chrs$pos1[i]-x_range, #2000000,
y=max_y_svs_3+size_interchr_SV_tip, size=size_text/.pt, colour=interSV_other_chrs$colour[i],
label=interSV_other_chrs$chr2[i])
}
}
}
}
}
}
#----------------------------------------------------------------------------
# highlight genes
#----------------------------------------------------------------------------
if(!is.null(genes)){
for(gene in genes){
if (genome_version == "hg38") {
gene_coord_now = gene_coord[gene_coord$gene==gene,]
}
else if (genome_version == "hg19") {
gene_coord_now = gene_coord_hg19[gene_coord_hg19$gene==gene,]
}
else if (genome_version == "T2T") {
gene_coord_now = gene_coord_T2T[gene_coord_T2T$gene==gene,]
}
else if (genome_version == "mm10") {
gene_coord_now = gene_coord_mm10[gene_coord_mm10$gene==gene,]
}
else if (genome_version == "mm39") {
gene_coord_now = gene_coord_mm39[gene_coord_mm39$gene==gene,]
}
else {stop("Genome version not recognized")}
#Some genes are not in the annotation list -> skip
if (nrow(gene_coord_now) == 0) {next}
# are the genes to be plotted in the selected chromosomes?
# print(gene_coord_now)
# print(chr_selection)
if (gene_coord_now$chr %in% chr_selection$chr){
if(nrow(gene_coord_now)>0 & gene_coord_now$chr %in% chr_selection$chr &
gene_coord_now$start > chr_selection$start[which(chr_selection$chr==gene_coord_now$chr)] & # if the gene is outside plotting range discard
gene_coord_now$start < chr_selection$end[which(chr_selection$chr==gene_coord_now$chr)]
){
# add vertical line
p =  p +
#Substitute line for geom rect,
#Keep line for small genes in large plotting regions geom_rect sometimes fails
geom_curve(data = data.frame(cov = 1, chr = gene_coord_now$chr),
x=gene_coord_now$start, xend=gene_coord_now$start,
y=0, #max_y_svs_2 + (max_y_svs_3-max_y_svs_2)/2,
yend=max_y_svs_3-1, curvature=0,  size=0.25, colour="green",alpha=.75) +
geom_rect(data = data.frame(cov = 1, chr = gene_coord_now$chr),
xmin=gene_coord_now$start, xmax=gene_coord_now$end,
ymin=0, #max_y_svs_2 + (max_y_svs_3-max_y_svs_2)/2,
ymax=max_y_svs_3-1,
size=0.25, fill = "green", alpha=.6)
# # add text annotation
# dat_text <- data.frame(label = gene,
#                        chr= factor(gene_coord_now$chr,levels = chr_selection$chr),
#                        pos=gene_coord_now$start, y= max_y_svs_3+ 0.5
# )
dat_text <- data.frame(label = gene,
chr= factor(gene_coord_now$chr,levels = chr_selection$chr),
pos=(gene_coord_now$start+gene_coord_now$end)/2, y= max_y_svs_3-.5
)
p = p + geom_text(data = dat_text, mapping = aes(x= pos, y = y, label = label),
size=size_gene_label ,fontface="italic")
# add point
p = p + geom_point(data= dat_text, mapping = aes(x= pos, y = max_y_svs_3-1),
size=.5 ,colour="darkblue")
}
}
}
}
# add SV type description (add at the end so it is on top of lines)
if(legend_SV_types){
separation_labels= (scale_separation_SV_type_labels) * max_y
dat_text <- data.frame(label = c("t2tINV (-/-)","h2hINV (+/+)","DUP (-/+)","DEL (+/-)"),
chr= factor(chr_selection$chr[1],levels = chr_selection$chr), #Â we plot on first chr
pos=rep(chr_selection$start[1] + pos_SVtype_description,4),
y= c(max_y_svs_2+separation_labels,
max_y_svs_2-separation_labels,max_y_svs_1+separation_labels,max_y_svs_1-separation_labels),
colour = c(colour_t2tINV, colour_h2hINV, colour_DUP, colour_DEL)
)
p = p + geom_text(data = dat_text, mapping = aes(x= pos, y = y, label = label), # col = colour),
size=1.5, fontface="bold",
colour = c(colour_t2tINV, colour_h2hINV, colour_DUP, colour_DEL)
)
# put copy number title further down:
p = p + theme(axis.title.y = element_text(hjust=0.2))
}
# to remove vertical white lines:
p = p + theme(panel.grid.minor = element_line(colour = NA))
#SNV PLOTTING#
if (! is.null(custom_annotation)){
# get the maximum coordinates for the chr at hand
chr.coords <- cnv.plot %>%
group_by(chr) %>%
summarise(start = min(start),
end = max(end)) %>%
ungroup()
custom_annotation$selected = apply(custom_annotation, 1, function(row){
sel = FALSE
chr_i = row["chr"]
pos_i = row["pos"]
if (chr_i %in% cnv.plot$chr){
max_coord = chr.coords %>% filter(chr == chr_i) %>% pull(end)
min_coord = chr.coords %>% filter(chr == chr_i) %>% pull(start)
if (dplyr::between(as.numeric(pos_i),min_coord, max_coord)){
sel=TRUE
}
}
return(sel)
})
custom_annotation_selected <- custom_annotation %>% filter(selected)
if (nrow(custom_annotation_selected) > 0){
#Add anchor to have same plot area
anchor.df <- data.frame()
for (chr_i in unique(chr.coords$chr)){
max_coord = chr.coords %>% filter(chr == chr_i) %>% pull(end)
min_coord = chr.coords %>% filter(chr == chr_i) %>% pull(start)
row.min = c("chr"=chr_i, "pos"=min_coord, "y"=0)
row.max = c("chr"=chr_i, "pos"=max_coord, "y"=0)
rows=bind_rows(row.min,row.max)
anchor.df <- bind_rows(anchor.df, rows)
}
custom_annotation_selected <- custom_annotation_selected %>%
mutate(y = as.numeric(y),
pos = as.numeric(pos))
anchor.df <- anchor.df %>%
mutate(y = as.numeric(y),
pos = as.numeric(pos))
ann.plot <- ggplot(custom_annotation_selected, aes(x=pos, y=y)) +
geom_point(col=ann_dot_col, size=ann_dot_size) +
geom_point(data=anchor.df, col=NA, na.rm=T) +
facet_grid(. ~ factor(chr, levels = unique(chr_selection$chr)), space="free_x", scales="free_x") +
theme_classic() +
scale_x_continuous(expand=c(0,0)) +
ylab(ann_y_title) +
# scale_fill_manual(limits=c("true","suspect", "false"), values=c("black", "gray47", "gray76")) +
theme(
text=element_text(size=size_text, colour="black"), #, face ="bold"),
axis.text.x= element_blank(),
axis.ticks.x= element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size=size_text, colour="black"),
axis.text.y=element_text(size=size_text, colour="black"),
axis.line =  element_line(colour = "black", size=.25),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.25),
panel.grid.major.y=element_line( size=.01, color="gray"),
strip.background = element_blank(),
strip.placement = "outside",
plot.margin = unit(c(0, 0, 0, 0), "cm"),
panel.spacing.x = unit(.00625 * 3, "npc"),
strip.text.x = element_blank(), ## to remove the title of the facet panels
plot.title = element_blank(),
legend.position = "none"
)
}
}
if (exists("ann.plot")){
merged.p <- plot_grid(p, ann.plot,
align = "hv", axis="trbl",
ncol=1, rel_heights = c(1, ann_rel_size))
} else {
merged.p <- p
}
return(merged.p)
}
devtools::document()
usethis::use_pipe()
devtools::document()
setwd("../")
devtools::document()
devtools::document()
setwd("~/work/ReConPlot/")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
remove.packages("ReConPlot", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
remove.packages("ReConPlotDev", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
memory.limit()
system('lshw -class memory')
system('grep MemTotal /proc/meminfo')
system('lshw -class memory')
system('free -m')
system('free -m')
